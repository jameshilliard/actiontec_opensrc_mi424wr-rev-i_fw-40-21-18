RGSRC=../../
include $(RGSRC)/envir.mak

MKCONFIG=$(BUILDDIR)/pkg/util/mkconfig
TARGET_FILES=net-tools-config.h 
TARGET_FILES+=$(RG_BUILD)/local/include/libc_config_int.h
ifdef CONFIG_ULIBC
  TARGET_FILES+=$(RG_BUILD)/ulibc/include/libc_config.make \
    $(RG_BUILD)/ulibc/include/libc_config_int.h
endif
ifdef CONFIG_GLIBC
  TARGET_FILES+=$(RG_BUILD)/glibc/include/libc_config.make \
    $(RG_BUILD)/glibc/include/libc_config_int.h
endif

CD_EXPORTED_FILES+=align.h bio_socket.h bt_defs.h console_colors.h \
  daemon_init.h ebuf.h enum_macros.h enums.h estream.h estream_utils.h \
  event.h iana_if_type.h inet_conv.h io_wrappers.h ipc.h \
  ip_proto_name.h ipsec_types.h jhash.h libc_config.h libc_config_include.h \
  misc_funcs.h mmu_context.h net_types.h net_utils.h oam_ping.h obscure.h \
  os_includes.h os_libc_extra.h process_funcs.h pvc_scan.h read_conf_file.h \
  rg_conf_entries.h rg_def.h rg_defines.h rg_getopt.h \
  rg_ioctl.h rg_iplist.h rg_os.h rg_ppp.h rg_types.h rg_version_data.h \
  rg_version.h set.h set_utils.h stop.h syscalls_base.h syscalls.h \
  vx_in6.h wireless_defs.h rg_os.h rg_types.h net_types.h rg_iplist.h \
  set.h rg_conf_entries.h rg_version.h rg_set_utils.h dev_type.h \
  external_version_data.h cc_config.h comp_reg.h estream_throttle.h mgt_defs.h \
  igmp_proxy_consts.h be_api_gpl.h kos_chardev_id.h wpa_defs.h \
  def_generic_services.h voip_types.h dyn_field.h clink.h

CD_EXPORTED_FILES+=libc_config_bigendian.make libc_config_common.make \
  libc_config_dl.make libc_config_glibc.make libc_config_linux.make \
  libc_config_mmu.make libc_config_ulibc.make libc_config_vx.make \
  net-tools-config.make libc_config_arch_ppc.make

RG_CONFIG_MAKE_SRC=libc_config_common.make

ifeq ($(CONFIG_DYN_LINK),y)
  RG_CONFIG_MAKE_SRC+=libc_config_dl.make
endif
ifeq ($(TARGET_ENDIANESS),BIG)
  RG_CONFIG_MAKE_SRC+=libc_config_bigendian.make
endif

ifdef CONFIG_RG_OS_VXWORKS
  RG_CONFIG_MAKE_SRC+=libc_config_vx.make
endif
ifdef CONFIG_RG_OS_LINUX
  RG_CONFIG_MAKE_SRC+=libc_config_linux.make
  ifdef CONFIG_ULIBC
    RG_CONFIG_MAKE_SRC_ULIBC+=libc_config_ulibc.make
    ifeq ($(CONFIG_HAS_MMU),y)
      RG_CONFIG_MAKE_SRC_ULIBC+=libc_config_mmu.make
    endif
  endif
  ifdef CONFIG_GLIBC
    RG_CONFIG_MAKE_SRC_GLIBC+=libc_config_glibc.make
  endif
  ifeq ($(ARCH), ppc)
    RG_CONFIG_MAKE_SRC+=libc_config_arch_ppc.make
  endif
endif

ARCHCONFIG_FIRST_TASKS+=$(TARGET_FILES)

# $1 type of libc
LIBC_CONFIG_MAKE_GEN_FUNC=$(strip \
  $(MKDIR) $(@D) && \
  echo "Generating \"$@\"" && \
  echo "Using LibC defined as $1" && \
  rm -f $@ && \
  cat $^ > $@ \
)
  
%/glibc/include/libc_config_noprefix.make: $(RG_CONFIG_MAKE_SRC) $(RG_CONFIG_MAKE_SRC_GLIBC)
	@$(call LIBC_CONFIG_MAKE_GEN_FUNC,glibc)

%/ulibc/include/libc_config_noprefix.make: $(RG_CONFIG_MAKE_SRC) $(RG_CONFIG_MAKE_SRC_ULIBC)
	@$(call LIBC_CONFIG_MAKE_GEN_FUNC,ulibc)
	
%/libc_config_int.h: %/libc_config_noprefix.make $(MKCONFIG)
	@echo "Generating \"$@\""
	@echo "/* This file was autogenerated from libc_config.make. Do not edit */" > $@
	@$(MKCONFIG) $< >> $@
	@# The rg directory is needed because rg_gcc needs to add to the 
	@# include path only libc_config_int.h when it is invoked with
	@# -nostdinc.
	$(MKDIR) $*/libc_rg
	$(RG_LN_NOFAIL) $@ $*/libc_rg

# The variables which are taken from the makefiles must be prefixed with GLIBC_ 
# or ULIBC_, because they are all included in envir.mak
%/libc_config.make: %/libc_config_noprefix.make
	sed "s/^\([^#]\)/$(if $(filter %/ulibc,$*),ULIBC,GLIBC)_\1/" $< > $@

# use glibc config as the default libc for local targets
$(RG_BUILD)/local/include/libc_config_int.h: $(RG_BUILD)/glibc/include/libc_config_int.h
	$(MKDIR) $(@D)
	cat $<  > $@

net-tools-config.h: net-tools-config.make
	@echo "Generating \"$@\""
	@$(MKCONFIG) $< > $@

$(MKCONFIG):
	$(MAKE) -C $(dir $@) $(notdir $@)

include $(RGMK)

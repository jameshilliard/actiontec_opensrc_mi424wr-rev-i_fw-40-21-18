# common/Makefile.common -- common Makefile text for the
# 	common, wpa_supplicant and hostapd directories.
# 	This is included into each Makefile.
# 	Preceded this by including proper ".config" file.
#
# 	This does NOT list any object files since this will
# 	differ according to the directory!

ifndef INSTALL_ROOT
INSTALL_ROOT=$(shell cd ../install && pwd)
endif

# Debugging is easier if common library is staticly linked
ifeq ($(BUILD_WPA2_DEBUG),y)
ifndef BUILD_WPA2_STATIC_COMMON_LIBRARY
BUILD_WPA2_STATIC_COMMON_LIBRARY=y
endif
endif

# Determine whether to staticly link the common library.
# If only hostapd is being built (not wpa_supplicant) then it
# reduces flash consumption some to staticly link.
ifeq ($(BUILD_WPA2_STATIC_COMMON_LIBRARY),y)
COMMON_LIBS += $(INSTALL_ROOT)/lib/libwpa_common.a
else
COMMON_LIBS += $(INSTALL_ROOT)/lib/libwpa_common.so
endif

CFLAGS += -I../common

######### Madwifi driver include files
# If driver is not from madwifi.host then you must pre-define
# MADWIFIPATH to point to where #include <net80211/xxx.h> can be found
# As an option, a second include path MADWIFIINC may be pre-defined.
ifndef MADWIFIPATH
MADWIFIPATH=$(shell cd ../madwifi.host && pwd)
endif
CFLAGS += -I$(MADWIFIPATH)
ifdef MADWIFIINC
CFLAGS += -I$(MADWIFIINC)
endif
###### Operating system shim layer os_
ifndef CONFIG_OS
ifdef CONFIG_NATIVE_WINDOWS
CONFIG_OS=win32
else
CONFIG_OS=unix
endif
endif
ifeq ($(CONFIG_OS), internal)
CFLAGS += -DOS_NO_C_LIB_DEFINES
endif

####### eloop -- callback manager
ifndef CONFIG_ELOOP
CONFIG_ELOOP=eloop
endif

######################
ifdef CONFIG_IAPP
CFLAGS += -DCONFIG_IAPP
endif

#############
ifdef CONFIG_RSN_PREAUTH
CFLAGS += -DCONFIG_RSN_PREAUTH
CONFIG_L2_PACKET=y
endif


####### l2 packet -- packet injection / capture
ifndef CONFIG_L2_PACKET
CONFIG_L2_PACKET=linux
endif
ifeq ($(CONFIG_L2_PACKET), pcap)
ifdef CONFIG_WINPCAP
CFLAGS += -DCONFIG_WINPCAP
LIBS += -lwpcap -lpacket
LIBS_w += -lwpcap
else
LIBS += -ldnet -lpcap
endif
endif
ifeq ($(CONFIG_L2_PACKET), winpcap)
LIBS += -lwpcap -lpacket
LIBS_w += -lwpcap
endif
ifeq ($(CONFIG_L2_PACKET), freebsd)
LIBS += -lpcap
endif

################
ifdef CONFIG_EAP_TLS
CFLAGS += -DEAP_TLS
TLS_FUNCS=y
CONFIG_IEEE8021X_EAPOL=y
endif

#################
ifdef CONFIG_EAP_PEAP
CFLAGS += -DEAP_PEAP
TLS_FUNCS=y
CONFIG_IEEE8021X_EAPOL=y
CONFIG_EAP_TLV=y
CONFIG_EAP_MSCHAPV2=y
endif

##################
ifdef CONFIG_EAP_TTLS
CFLAGS += -DEAP_TTLS
MS_FUNCS=y
TLS_FUNCS=y
CONFIG_IEEE8021X_EAPOL=y
endif

#################
ifdef CONFIG_EAP_MD5
CFLAGS += -DEAP_MD5
CONFIG_IEEE8021X_EAPOL=y
endif

################
ifdef CONFIG_EAP_MSCHAPV2
CFLAGS += -DEAP_MSCHAPv2
MS_FUNCS=y
CONFIG_IEEE8021X_EAPOL=y
endif

#################
ifdef CONFIG_EAP_GTC
CFLAGS += -DEAP_GTC
CONFIG_IEEE8021X_EAPOL=y
endif

#################
ifdef CONFIG_EAP_OTP
CFLAGS += -DEAP_OTP
CONFIG_IEEE8021X_EAPOL=y
endif

##############
ifdef CONFIG_EAP_SIM
CFLAGS += -DEAP_SIM
CONFIG_IEEE8021X_EAPOL=y
CONFIG_EAP_SIM_COMMON=y
endif

############
ifdef CONFIG_EAP_LEAP
CFLAGS += -DEAP_LEAP
MS_FUNCS=y
CONFIG_IEEE8021X_EAPOL=y
endif

################
ifdef CONFIG_EAP_PSK
CFLAGS += -DEAP_PSK
CONFIG_IEEE8021X_EAPOL=y
NEED_AES=y
endif

##############
ifdef CONFIG_EAP_AKA
CFLAGS += -DEAP_AKA
CONFIG_IEEE8021X_EAPOL=y
CONFIG_EAP_SIM_COMMON=y
endif

##############
ifdef CONFIG_EAP_SIM_COMMON
NEED_AES=y
endif

############
ifdef CONFIG_EAP_TLV
CFLAGS += -DEAP_TLV
endif

####################
ifdef CONFIG_EAP_FAST
CFLAGS += -DEAP_FAST
TLS_FUNCS=y
endif

#########
ifdef CONFIG_EAP_PAX
CFLAGS += -DEAP_PAX
CONFIG_IEEE8021X_EAPOL=y
endif

###########
ifdef CONFIG_EAP_SAKE
CFLAGS += -DEAP_SAKE
CONFIG_IEEE8021X_EAPOL=y
endif

############
ifdef CONFIG_EAP_GPSK
CFLAGS += -DEAP_GPSK
CONFIG_IEEE8021X_EAPOL=y
ifdef CONFIG_EAP_GPSK_SHA256
CFLAGS += -DEAP_GPSK_SHA256
NEED_SHA256=y
endif
endif

##############
ifeq ($(CONFIG_EAP_WPS),y)
NEED_AES=y
NEED_SHA256=y
TLS_FUNCS=y
NEED_CRYPTO=y
# master flag EAP_WPS
CFLAGS += -DEAP_WPS
ifdef CONFIG_DRIVER_MADWIFI
CFLAGS += -DATH_WPS_IE
endif #CONFIG_DRIVER_MADWIFI
# generate beacon etc. ie's for PIN mode
CFLAGS += -DWPS_OPT_PIN_BEACON_IE
# cancel PIN mode after 2 minutes as for PBC
CFLAGS += -DWPS_OPT_PIN_TIMEOUT
# cancel PIN when WPS done/failed
CFLAGS += -DWPS_OPT_PIN_SELF_CANCEL
ifeq ($(CONFIG_WPS_OPT_UPNP),y)
CFLAGS += -DWPS_OPT_UPNP
ifeq ($(CONFIG_TINYUPNP),y)
CFLAGS += -DWPS_OPT_TINYUPNP
NEED_HTTPREAD=y
else
CFLAGS += -I$(INSTALL_ROOT)/include/upnp
endif #CONFIG_TINYUPNP
endif #CONFIG_WPS_OPT_UPNP
ifdef CONFIG_WPS_OPT_NFC
CFLAGS += -DWPS_OPT_NFC
#was# CFLAGS += -I/usr/src/redhat/BUILD/WpsNfcLibrary
#was# LIBS += /usr/lib/wpsnfc.dll /usr/lib/libnfc_mapping_pn53x.dll
endif #CONFIG_WPS_OPT_NFC
endif #CONFIG_EAP_WPS


###########
ifdef CONFIG_IEEE8021X_EAPOL
# IEEE 802.1X/EAPOL state machines (e.g., for RADIUS authentication)
CFLAGS += -DIEEE8021X_EAPOL
endif

#############
ifdef CONFIG_PCSC
# PC/SC interface for smartcards (USIM, GSM SIM)
CFLAGS += -DPCSC_FUNCS -I/usr/include/PCSC
# -lpthread may not be needed depending on how pcsc-lite was configured
ifdef CONFIG_NATIVE_WINDOWS
#Once MinGW gets support for WinScard, -lwinscard could be used instead of the
#dynamic symbol loading that is now used in pcsc_funcs.c
#LIBS += -lwinscard
else
LIBS += -lpcsclite -lpthread
endif
endif

##########################
ifdef CONFIG_EAP
CFLAGS += -DEAP_SERVER
endif

#######################
ifndef CONFIG_TLS
CONFIG_TLS=openssl
endif

#######################
## ifeq ($(CONFIG_TLS), internal)
ifndef CONFIG_CRYPTO
CONFIG_CRYPTO=internal
endif
## endif
ifeq ($(CONFIG_CRYPTO), libtomcrypt)
CFLAGS += -DCONFIG_INTERNAL_X509
endif
ifeq ($(CONFIG_CRYPTO), internal)
CFLAGS += -DCONFIG_INTERNAL_X509
endif


##################
ifdef TLS_FUNCS
# Shared TLS functions (needed for EAP_TLS, EAP_PEAP, EAP_TTLS, and EAP_FAST)
CFLAGS += -DEAP_TLS_FUNCS
# OBJS += eap_tls_common.o
ifeq ($(CONFIG_TLS), openssl)
CFLAGS += -DEAP_TLS_OPENSSL
#WAS# LIBS += -lssl -lcrypto
CFLAGS += -I$(INSTALL_ROOT)/include/openssl
LIBS += -L$(INSTALL_ROOT)/lib/openssl
LIBS += $(INSTALL_ROOT)/lib/libssl.a
LIBS += $(INSTALL_ROOT)/lib/libcrypto.a
#was# LIBS_p += -lcrypto
LIBS_p += $(INSTALL_ROOT)/lib/libcrypto.a
LIBS += -ldl
endif   # openssl
ifeq ($(CONFIG_TLS), gnutls)
LIBS += -lgnutls -lgcrypt -lgpg-error
LIBS_p += -lgcrypt
ifdef CONFIG_GNUTLS_EXTRA
CFLAGS += -DCONFIG_GNUTLS_EXTRA
LIBS += -lgnutls-extra
endif  # CONFIG_GNUTLS_EXTRA
endif  # gnutls
ifeq ($(CONFIG_TLS), schannel)
endif  # schannel
ifeq ($(CONFIG_TLS), internal)
ifneq ($(CONFIG_BACKEND), file)
endif  # file
CFLAGS += -DCONFIG_TLS_INTERNAL
ifeq ($(CONFIG_CRYPTO), internal)
ifdef CONFIG_INTERNAL_LIBTOMMATH
CFLAGS += -DCONFIG_INTERNAL_LIBTOMMATH
else  # CONFIG_CRYPTO internal
LIBS += -ltommath
LIBS_p += -ltommath
endif # CONFIG_CRYPTO internal
endif # CRYPTO internal
ifeq ($(CONFIG_CRYPTO), libtomcrypt)
LIBS += -ltomcrypt -ltfm
LIBS_p += -ltomcrypt -ltfm
endif # CRYPTO libtomcrypt
endif # CONFIG_TLS internal
ifeq ($(CONFIG_TLS), none)
CFLAGS += -DEAP_TLS_NONE
CONFIG_INTERNAL_AES=y
CONFIG_INTERNAL_SHA1=y
CONFIG_INTERNAL_MD5=y
CONFIG_INTERNAL_SHA256=y
endif # CONFIG_TLS none
ifdef CONFIG_SMARTCARD
ifndef CONFIG_NATIVE_WINDOWS
ifneq ($(CONFIG_L2_PACKET), freebsd)
LIBS += -ldl
endif # CONFIG_L2_PACKET freebsd
endif # CONFIG_NATIVE_WINDOWS
endif # CONFIG_SMARTCARD
NEED_CRYPTO=y
else  # TLS_FUNCS
endif # TLS_FUNCS


############
ifdef CONFIG_PKCS12
CFLAGS += -DPKCS12_FUNCS
endif

###########
ifdef CONFIG_SMARTCARD
CFLAGS += -DCONFIG_SMARTCARD
endif

##########
ifdef MS_FUNCS
NEED_CRYPTO=y
endif

###############
ifdef NEED_CRYPTO
ifndef TLS_FUNCS
ifeq ($(CONFIG_TLS), openssl)
#was# LIBS += -lcrypto
LIBS += $(INSTALL_ROOT)/lib/libcrypto.a
#was# LIBS_p += -lcrypto
LIBS += -ldl
endif
ifeq ($(CONFIG_TLS), gnutls)
LIBS += -lgcrypt
endif
ifeq ($(CONFIG_TLS), schannel)
endif
ifeq ($(CONFIG_TLS), internal)
ifeq ($(CONFIG_CRYPTO), libtomcrypt)
LIBS += -ltomcrypt -ltfm
endif
endif
endif
ifeq ($(CONFIG_TLS), openssl)
CONFIG_INTERNAL_SHA256=y
endif
ifeq ($(CONFIG_TLS), gnutls)
CONFIG_INTERNAL_SHA256=y
endif
ifeq ($(CONFIG_TLS), schannel)
CONFIG_INTERNAL_SHA256=y
endif
ifeq ($(CONFIG_TLS), internal)
ifeq ($(CONFIG_CRYPTO), libtomcrypt)
CONFIG_INTERNAL_SHA256=y
endif

ifeq ($(CONFIG_CRYPTO), internal)
CFLAGS += -DCONFIG_CRYPTO_INTERNAL
CONFIG_INTERNAL_AES=y
CONFIG_INTERNAL_DES=y
CONFIG_INTERNAL_SHA1=y
CONFIG_INTERNAL_MD4=y
CONFIG_INTERNAL_MD5=y
CONFIG_INTERNAL_SHA256=y
endif

########## Crypto math
ifeq ($(CONFIG_CRYPTO), cryptoapi)
CFLAGS += -DCONFIG_CRYPTO_CRYPTOAPI
CONFIG_INTERNAL_SHA256=y
endif
endif
ifeq ($(CONFIG_TLS), none)
CONFIG_INTERNAL_SHA256=y
endif
else
CONFIG_INTERNAL_AES=y
CONFIG_INTERNAL_SHA1=y
CONFIG_INTERNAL_MD5=y
CONFIG_INTERNAL_SHA256=y
CONFIG_INTERNAL_LIBTOMMATH=y
endif

############
ifdef CONFIG_INTERNAL_AES
CFLAGS += -DINTERNAL_AES
endif
ifdef CONFIG_INTERNAL_SHA1
CFLAGS += -DINTERNAL_SHA1
endif
ifdef CONFIG_INTERNAL_SHA256
CFLAGS += -DINTERNAL_SHA256
endif
ifdef CONFIG_INTERNAL_MD5
CFLAGS += -DINTERNAL_MD5
endif
ifdef CONFIG_INTERNAL_MD4
CFLAGS += -DINTERNAL_MD4
endif
ifdef CONFIG_INTERNAL_DES
CFLAGS += -DINTERNAL_DES
endif

ifdef CONFIG_RADIUS_SERVER
CFLAGS += -DRADIUS_SERVER
endif

ifdef CONFIG_IPV6
CFLAGS += -DCONFIG_IPV6
endif


#############
ifdef NEED_SHA256
endif

#### control interface
ifdef CONFIG_CTRL_IFACE
ifeq ($(CONFIG_CTRL_IFACE), y)
ifdef CONFIG_NATIVE_WINDOWS
CONFIG_CTRL_IFACE=named_pipe
else
CONFIG_CTRL_IFACE=unix
endif
endif
CFLAGS += -DCONFIG_CTRL_IFACE
ifeq ($(CONFIG_CTRL_IFACE), unix)
CFLAGS += -DCONFIG_CTRL_IFACE_UNIX
endif
ifeq ($(CONFIG_CTRL_IFACE), udp)
CFLAGS += -DCONFIG_CTRL_IFACE_UDP
endif
ifeq ($(CONFIG_CTRL_IFACE), named_pipe)
CFLAGS += -DCONFIG_CTRL_IFACE_NAMED_PIPE
endif
endif
ifdef CONFIG_CTRL_IFACE_DBUS
CFLAGS += -DCONFIG_CTRL_IFACE_DBUS -DDBUS_API_SUBJECT_TO_CHANGE
LIBS += `pkg-config --libs dbus-1`
CFLAGS += `pkg-config --cflags dbus-1`
endif
# Disable this to disallow showing key for STATUS command:
CFLAGS += -DCONFIG_CTRL_IFACE_SHOW_KEY

####### Debugging messages
ifdef CONFIG_NO_STDOUT_DEBUG
CFLAGS += -DCONFIG_NO_STDOUT_DEBUG
ifndef CONFIG_CTRL_IFACE
CFLAGS += -DCONFIG_NO_WPA_MSG
endif
endif
# Uncomment the following to place debug file in /tmp :
# CFLAGS += -DCONFIG_DEBUG_FILE

# ATH_TDLS from build/scripts/pbXX-carrier/config.pbXX-carrier, 
# so enabling this FLAG will build wpa_supplicant and wlan driver
# with TDLS feature enabled
ifdef ATH_TDLS
CONFIG_PEERKEY=y
CONFIG_TDLS=y
endif

##############
ifdef CONFIG_PEERKEY
CFLAGS += -DCONFIG_PEERKEY
endif

############
ifdef CONFIG_IEEE80211W
CFLAGS += -DCONFIG_IEEE80211W
NEED_SHA256=y
endif

################
ifndef CONFIG_NO_WPA
NEED_AES=y
else
CFLAGS += -DCONFIG_NO_WPA -DCONFIG_NO_WPA2
endif

###############
ifdef CONFIG_NO_WPA2
CFLAGS += -DCONFIG_NO_WPA2
endif

################
ifdef CONFIG_NO_AES_EXTRAS
CFLAGS += -DCONFIG_NO_AES_WRAP
CFLAGS += -DCONFIG_NO_AES_CTR -DCONFIG_NO_AES_OMAC1
CFLAGS += -DCONFIG_NO_AES_EAX -DCONFIG_NO_AES_CBC
endif

#############
ifdef NEED_AES
endif

###########
ifdef CONFIG_CLIENT_MLME
CFLAGS += -DCONFIG_CLIENT_MLME
endif

#############
ifndef CONFIG_MAIN
CONFIG_MAIN=main
endif

##############
ifeq ($(CONFIG_CARRIER_ETHERSTA),y)
# carrier ether dongle mode flag CARRIER_ETHERSTA
CFLAGS += -DCONFIG_ETHERSTA
endif #CONFIG_CARRIER_ETHERSTA
ifeq ($(CONFIG_ETHERSTA),y)
# STA forwarding support
CFLAGS += -DCONFIG_ETHERSTA
endif #CONFIG_ETHERSTA

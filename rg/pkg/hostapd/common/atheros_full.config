# full.config -- configures all usual options
# these can be overridden, so this file can be used as a base
# for configurations with less options.

######### TEMPORARY DISABLE UPNP ##############
## CONFIG_NO_UPNP=y
######### TEMPORARY DISABLE UPNP ##############
######### TEMPORARY DISABLE ENTERPRISE ##############
## CONFIG_NO_ENTERPRISE=y
######### TEMPORARY DISABLE ENTERPRISE ##############

ifndef CC
CC=gcc
endif

ifndef CFLAGS
ifeq ($(BUILD_WPA2_DEBUG),y)
CFLAGS = -MMD -Wall -g -static
else
CFLAGS = -O2 -MMD -Wall -g
endif
endif

# Include directories
CFLAGS += -I.
CFLAGS += -I../common
CFLAGS += -I$(INSTALL_ROOT)/include 
LIBS += -L$(INSTALL_ROOT)/lib

# Common library (depends upon other libraries later)
LIBS += -lwpa_common

# Misc. flags
CFLAGS += -DMODIFIED_BY_SONY

# Select control interface backend for external programs, e.g, wpa_cli:
# unix = UNIX domain sockets (default for Linux/*BSD)
# udp = UDP sockets using localhost (127.0.0.1)
# named_pipe = Windows Named Pipe (default for Windows)
# y = use default (backwards compatibility)
# If this option is commented out, control interface is not included in the
# build.
CONFIG_CTRL_IFACE=y

# Internal crypto support (see wpa_supplicant/hostapd for other options)
CONFIG_CRYPTO=internal
CONFIG_INTERNAL_AES=y
CONFIG_INTERNAL_DES=y
CONFIG_INTERNAL_SHA1=y
CONFIG_INTERNAL_MD4=y
CONFIG_INTERNAL_MD5=y
CONFIG_INTERNAL_SHA256=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
CONFIG_PKCS12=y

# Smartcard support (i.e., private key on a smartcard), e.g., with openssl
# engine.
#CONFIG_SMARTCARD=y

# Remove debugging code that is printing out debug message to stdout.
# This can be used to reduce the size of the wpa_supplicant considerably
# if debugging code is not needed. The size reduction can be around 35%
# (e.g., 90 kB).
#CONFIG_NO_STDOUT_DEBUG=y


# Remove AES extra functions. This can be used to reduce code size by about
# 1.5 kB by removing extra AES modes that are not needed for commonly used
# client configurations (they are needed for some EAP types).
#CONFIG_NO_AES_EXTRAS=y

# Select wrapper for operatins system and C library specific functions
# unix = UNIX/POSIX like systems (default)
# win32 = Windows systems
# none = Empty template
#CONFIG_OS=unix

# Select event loop implementation
# eloop = select() loop (default)
# eloop_win = Windows events and WaitForMultipleObject() loop
# eloop_none = Empty template
#CONFIG_ELOOP=eloop

# Select layer 2 packet implementation
# linux = Linux packet socket (default)
# pcap = libpcap/libdnet/WinPcap
# freebsd = FreeBSD libpcap
# winpcap = WinPcap with receive thread
# ndis = Windows NDISUIO (note: requires CONFIG_USE_NDISUIO=y)
# none = Empty template
#CONFIG_L2_PACKET=linux

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
# CONFIG_PEERKEY=y

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
# with WPA/WPA2 security enabled.
# NOTE: CONFIG_PEERKEY should be enabled(i.e) CONFIG_PEERKEY=y
# CONFIG_TDLS=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
#CONFIG_IEEE80211W=y

# Select TLS implementation
# openssl = OpenSSL (default)
# gnutls = GnuTLS (needed for TLS/IA, see also CONFIG_GNUTLS_EXTRA)
# internal = Internal TLSv1 implementation (experimental)
# none = Empty template
# CONFIG_TLS=openssl
## Atheros: use internal crypto routines only
CONFIG_TLS=internal

# Whether to enable TLS/IA support, which is required for EAP-TTLSv1.
# You need CONFIG_TLS=gnutls for this to have any effect. Please note that
# even though the core GnuTLS library is released under LGPL, this extra
# library uses GPL and as such, the terms of GPL apply to the combination
# of wpa_supplicant and GnuTLS if this option is enabled. BSD license may not
# apply for distribution of the resulting binary.
#CONFIG_GNUTLS_EXTRA=y

# If CONFIG_TLS=internal is used, additional library and include paths are
# needed for LibTomMath. Alternatively, an integrated, minimal version of
# LibTomMath can be used. See beginning of libtommath.c for details on benefits
# and drawbacks of this option.
CONFIG_INTERNAL_LIBTOMMATH=y
#ifndef CONFIG_INTERNAL_LIBTOMMATH
#LTM_PATH=/usr/src/libtommath-0.39
#CFLAGS += -I$(LTM_PATH)
#LIBS += -L$(LTM_PATH)
#LIBS_p += -L$(LTM_PATH)
#endif

# Include client MLME (management frame processing).
# This can be used to move MLME processing of Devicescape IEEE 802.11 stack
# into user space.
#CONFIG_CLIENT_MLME=y
# Currently, driver_devicescape.c build requires some additional parameters
# to be able to include some of the kernel header files. Following lines can
# be used to set these (WIRELESS_DEV must point to the root directory of the
# wireless-dev.git tree).
#WIRELESS_DEV=/usr/src/wireless-dev
#CFLAGS += -I$(WIRELESS_DEV)/net/mac80211

# Default, use tiny upnp implementation to save memory resources.
# Note: at this writing, not implemented for wpa_supplicant, resulting
# in turning off of UPnP for wpa_supplicant.
# The alternative would be to bring the libupnp related back to life (ugh!)
# or to add tiny upnp support to wpa_supplicant (not that hard to do).
#was# ifndef CONFIG_TINYUPNP
CONFIG_TINYUPNP=y
#was# endif   #CONFIG_TINYUPNP

# EAP-WPS for the integrated EAP server
ifndef CONFIG_NO_WPS
CONFIG_EAP_WPS=y
ifeq ($(CONFIG_TINYUPNP),y)
ifeq ($(CONFIG_TINY_UPNP_UNIMPLEMENTED),y)
# No UPnP if we want "tiny" code and it is not implemented yet
CONFIG_NO_UPNP=y
endif   #CONFIG_TINY_UPNP_UNIMPLEMENTED
endif   #CONFIG_TINYUPNP
ifeq ($(CONFIG_NO_UPNP),y)
CONFIG_WPS_OPT_UPNP=n
else
CONFIG_WPS_OPT_UPNP=y
#was# ifeq ($(CONFIG_TINYUPNP),y)
#was# # no special libraries...
#was# else    # full libupnp
#was# LIBS += -lupnp -lixml -lthreadutil -lpthread
#was# endif   #CONFIG_TINYUPNP
endif   #CONFIG_NO_UPNP
endif   #CONFIG_NO_WPS

#WAS# CONFIG_WPS_OPT_NFC=y
#WAS# CFLAGS += -I/usr/src/redhat/BUILD/WpsNfcLibrary
#WAS# EXTRALIBS += /usr/lib/wpsnfc.dll /usr/lib/libnfc_mapping_pn53x.dll

# use Intel-SDK for WPS
# (Support removed by Atheros)
#CONFIG_USE_INTEL_SDK=y
#DIFF_PORT_FROM_SUPPS=y




